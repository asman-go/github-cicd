name: Terraform

on:
  workflow_call:
    inputs:

      terraform_folder:
        type: string
        required: false
        description: Path to a Terraform configs folder
        default: deploy

env:
  # YCloud main secret
  YC_TOKEN: ${{ secrets.YC_TOKEN }}

  # Terraform default variables
  TF_VAR_cloud: ikemurami-cloud
  TF_VAR_folder: asman-testing-46942

  # terraform remote backend config
  AWS_REGION: ru-central1
  AWS_ACCESS_KEY_ID: todo
  AWS_SECRET_ACCESS_KEY: todo
  AWS_ENDPOINT_URL_DYNAMODB: https://docapi.serverless.yandexcloud.net/ru-central1/b1g2amdfmrmrjn7ci2rm/etn9qvvd52uncdr52157
  AWS_ENDPOINT_URL_S3: storage.yandexcloud.net

jobs:
  terraform-prod:
    name: Terraform plan & apply
    # if: github.ref == 'refs/heads/$default-branch'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
    # 1. Checkout
    - name: Checkout repo
      uses: actions/checkout@v4

    # 2. Install dependencies
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Setup Protoc
      if: github.event_name == 'push'
      uses: arduino/setup-protoc@v2

    # 3. Terraform Plan
    - name: Terraform Init
      run: terraform -chdir=${{ inputs.terraform_folder }} init

    - name: Terraform Check Format
      run: terraform -chdir=${{ inputs.terraform_folder }} fmt -check

    - name: Terraform Plan
      run: terraform -chdir=${{ inputs.terraform_folder }} plan -input=false
    
    # 4. generate python code and deploy function if it is a merge request
    - name: Generate python schema
      if: github.event_name == 'push'
      run: protoc -I ./proto --python_out=./src ./proto/*.proto

    - name: Terraform Apply
      if: github.event_name == 'push'
      run: terraform -chdir=${{ inputs.terraform_folder }} apply -auto-approve -input=false
